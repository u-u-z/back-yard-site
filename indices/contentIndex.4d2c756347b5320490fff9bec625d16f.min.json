{"/":{"title":"Remi IO","content":"\n## 🪧 WHAT'S THIS\n\u003e 🌻 Remi's **back yard**, **collections**, **blogs**, **knowledge** base for everything usefully.\n- 📒 Record something I research. (markdown by: Obsidian)\n- 🏠 [MAIN SITE](https://www.linux.dog) - ⬅️ go back to www.linux.dog or www.remi.fun\n\n## 📖 CATALOGS\n- [[👬 FRIENDS]] - my cool guys. my second self.\n- [[📒 BLOGS]] - my blogs, articles about tech.\n---\n\u003e 🏠 If u r interested in how this site is built ,plz see [[🏠 ABOUT THIS SITE]]\n\n","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-ABOUT-THIS-SITE":{"title":"🏠 ABOUT THIS SITE","content":"\n## 🤔 WHATS HAPPEND BEFORE ...\n\n\u003e ☁️ cuz cloud server provider upgrade, they migrate the business, I lost home site...  \n\n---  \nLast time, I'm used the HEXO to build a blog. (before 2018 I used wordpress for [my old blog site](https://web.archive.org/web/20180105093233/https://linux.dog/) ...  ) At that time, Im a ~~full-stack developer~~ (not real just node.js user). We love everthing on node.js runtime, npm, and other things. That's easy way to use the `yarn` get everything.\nI've been following the trendy stuff, ignore actually write sth. I hope my blog able to really build up some knowledge for me.\n\nI thought HEXO had been good until I started working for [meta.io (2021-2022)](https://github.com/Meta-Network). They chose to use HEXO as a static site generator to generate sites from their \"User centre\", which was done to make static resources (deploy on chain) work better on Web3.\n\n\u003e I should clarify that Im just interested in web3 technology. Thats really an \"out-of-the-box\" resource provable system (I'm bullshitting, u must have a lot of objections).\n\nThe process of developing the HEXO plugin has led me to read a lot of source code, plugins, and most of them have not been maintained for a long time. It's hard to be timeless after being fashionable. Thats worries me, even though my blog is same not update ...\n\nBy chance I started using [logseq](https://github.com/logseq/logseq) as my knowledge tool. After that I heard about [Obsidian](https://obsidian.md) and I started to experiment with it as a markdown tool. They r [Zettelkasten](https://en.wikipedia.org/wiki/Zettelkasten) firendly and can export the doc to HTML for a site. **So why not use those build my blog ?** \n\n## 🔍 Some research\nWe can found some HTML converter and generator tools search by Google. We need the publisher convert the Obsidian markdown document to HTML pages, and generate a site for publish. After sifting through them, I found publish solutions via jekyll or hugo, in addition to the official website generation service.\n- Jekyll: https://github.com/maximevaillancourt/digital-garden-jekyll-template\n- Hugo: https://github.com/jackyzha0/quartz\nSo, I have created a \"workflow\" for note/blog posting. I opted for the hugo solution ... Changes were made to his [Github repo](https://github.com/u-u-z/back-yard-site) to create this site. The site content its in [another repo](https://github.com/u-u-z/back-yard-content). I make changes to my notes (things I want to publish) directly in Obsidian, and committing the commit triggers Github actions to package my site and update it to the Cloudflare pages service. (Despite being trolled by [friend🍋](https://lemonhx.moe) for being too slow to update 😂)\n## 🚀 Experience\n```\n!TODO: Takes a while to return for updates 😄\n```","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-BLOGS":{"title":"","content":"## 📖 Finished\n```\nnull\n```\n## 📝 Drafts\n- [[📖 How Linux Works]] - [Satoru Takeuchi(武内 覚)](https://twitter.com/satoru_takeuchi)'s book. #01-08-2023  \n- [[💧 Elixir-lang pieces of information]] #01-18-2023\n- [[🔧 MY TOOL COLLECTIONS]] #04-19-2023  \n- [[🔧 LLVM IR TO WASM NOTES]] #04-25-2023   \n\n## 📦 Backup article from sp.\n- [[🎡 DEPLOY UNITY WEBGL ASSETS ON NGINX]] #08-16-2022  \n- [[🌈 GRADIENT MAP]] #08-11-2022    \n\n","lastmodified":"2023-04-25T12:16:32.964219338Z","tags":null},"/-DEPLOY-UNITY-WEBGL-ASSETS-ON-NGINX":{"title":"🎡 DEPLOY UNITY WEBGL ASSETS ON NGINX","content":"## REFERENCE\n[Server configuration code samples - Unity 手册](https://docs.unity3d.com/cn/2022.1/Manual/webgl-server-configuration-code-samples.html)\n## TOOLS\n[NGINX Beautifier](https://nginxbeautifier.github.io) - Nginx configuration formatter online\n## Docker docker-compose config.\n```YAML\nservices:\n  web:\n    image: nginx\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./www/:/usr/share/nginx/html\n    ports:\n      - \"8081:80\"\n```\n## A simple nginx.conf file.\n```nginx\nuser nginx;\nworker_processes auto;\n\nerror_log /var/log/nginx/error.log notice;\npid /var/run/nginx.pid;\n\n\nevents\n{\n        worker_connections 1024;\n}\n\n\nhttp\n{\n        include /etc/nginx/mime.types;\n        default_type application/octet-stream;\n\n        log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n        access_log /var/log/nginx/access.log main;\n\n        sendfile on;\n        #tcp_nopush     on;\n\n        keepalive_timeout 65;\n\n        gzip off;\n\n        #include /etc/nginx/conf.d/*.conf;\n\n        server\n        {\n                listen 80;\n\n                root /usr/share/nginx/html;\n                #try_files $uri /index.html;\n\n                location ~ .+\\.(data|symbols\\.json)\\.br$\n                {\n                        gzip off;\n                        add_header Content-Encoding br;\n                        default_type application/octet-stream;\n                }\n\n                location ~ .+\\.js\\.br$\n                {\n                        gzip off; # Do not attempt dynamic gzip compression on an already compressed file\n                        add_header Content-Encoding br;\n                        default_type application/javascript;\n                }\n\n                location ~ .+\\.wasm\\.br$\n                {\n                        gzip off; # Do not attempt dynamic gzip compression on an already compressed file\n                        add_header Content-Encoding br;\n                        default_type application/wasm;\n                }\n\n                location ~ .+\\.(data|symbols\\.json)\\.gz$\n                {\n                        gzip off; # Do not attempt dynamic gzip compression on an already compressed file\n                        add_header Content-Encoding gzip;\n                        default_type application/octet-stream;\n                }\n\n                location ~ .+\\.js\\.gz$\n                {\n                        gzip off; # Do not attempt dynamic gzip compression on an already compressed file\n                        add_header Content-Encoding gzip;\n                        default_type application/javascript;\n                }\n\n                location ~ .+\\.wasm\\.gz$\n                {\n                        gzip off; # Do not attempt dynamic gzip compression on an already compressed file\n                        add_header Content-Encoding gzip;\n                        default_type application/wasm;\n                }\n        }\n}\n```","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-Elixir-lang-pieces-of-information":{"title":"💧 Elixir lang","content":"\u003e just pieces of information not a article.\n\n## Official description\n- Platform features\n\t- Scalability - `process`: lightweight threads of execution\n\t- Fault-tolerance - `Supervisor` : describe how to restart parts of your system when things go awry (details needs...)\n- Language features\n\t- Functional programming;\n\t- Pattern matching;\n- Extensibility and DSLs\n\t- [Elixir's test framework called ExUnit](https://hexdocs.pm/ex_unit/)\n\t- [Elixir to write SQL queries](https://github.com/elixir-ecto/ecto)\n\t- [compiling a subset of Elixir to the GPU](https://github.com/elixir-nx/nx)\n- Tooling features: [IEx (Elixir's interactive shell)](https://hexdocs.pm/iex/), mix, [Hex package manager](https://hex.pm/), [hosts documentation](https://hexdocs.pm/), ... etc\n---\n## Resource about #BEAM or #benchmark\n- https://github.com/kvakvs/beam-wisdoms - containing pieces of information and knowledge about BEAM Virtual machine - visit: [http://beam-wisdoms.clau.se](http://beam-wisdoms.clau.se/en/latest/eli5-vm.html)\n- https://github.com/happi/theBeamBook - A description of the Erlang Runtime System ERTS and the virtual Machine BEAM.\n- [Webserver Benchmark: Erlang vs Go vs Java vs NodeJS](https://stressgrid.com/blog/webserver_benchmark/)\n- [How does the BEAM VM (Elixir/Erlang) compare to the JVM (Java)?](https://www.quora.com/How-does-the-BEAM-VM-Elixir-Erlang-compare-to-the-JVM-Java)\n- [Why should we \"reinvent the wheel\" by using Akka with Java if we have Elixir/Erlang ready for production?](https://qr.ae/prCrGR)\n---\n## Get start\n\u003e [!IMPORTANT] \n\u003e for my side, I use Nix package manager to start envrionments for Elixir\n\n","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-FRIENDS":{"title":"My friends.","content":"\u003e  📊 In no particular order\n\n## 🌟 COOL GUYS\n- [**🥼 XYenon**](https://blog.xyenon.bid)\n- [**🍋 LemonHX**](https://lemonhx.moe/)\n- [**🍄 Nekotora 🐮**](https://flag.moe/)\n- [**🐱 XinNya**](https://xin.moe)\n- [**🧊 9bie**](https://9bie.org/)\n- [**👤 Fawdlstty**](https://www.fawdlstty.com/)\n- [**🦟 Archeb**](https://mozz.ie)\n- [**🐧 Moehentai2333**](https://conoha.vip)\n- [**👤 David Huang** (hjc4869)](https://hjc.im)\n- [🍓 **StarryVoid**](https://blog.starryvoid.com)\n- [🐱 **Billchenchina**](https://billchen.bid)\n- [**👤 Steven(hly0928)**](http://hly0928.com)\n- [**🐰 DGideas**](https://dgideas.net)\n- [**✈️ Ho 229**](https://ho229.lind0.space)\n- [**🍊 JuziYou**](https://lovemen.cc)\n- [**🐱 LemonNeko 🍋**](https://blog.lemonneko.moe)\n- [**🐰 Suemor**](https://suemor.com)\n\n## 💨 NULL or NO LINK ...\n- ~~zomw.cn~~ \n- ~~futa.eu~~\n- ~~wittey.net~~\n- [XiaoWoHan](https://hanblog.xyz/)\n- [Raptazure](https://raptazure.github.io/)\n\n## ℹ️ SOME INFO\n\u003e Exchange LINKS welcome 👋.\n\nIf u wanna. Leave your message here. (but its better if we knew each other...).  \nPlz, notification me throw my Telegram, Twitter or Email, u can find it on main site (www.linux.dog).\n\nSome info for u:\n- Domain: www.linux.dog (or www.remi.fun)\n- ID: `Remi IO` || `RemiIO` | `Remi_IO`\n- Avatar: url ( `https://raw.githubusercontent.com/u-u-z/u-u-z/main/img/Remi_IO.JPG` )\n\t- [avatar view](https://raw.githubusercontent.com/u-u-z/u-u-z/main/img/Remi_IO.JPG)\n\t- \u003cimg alt=\"old\" src=\"https://raw.githubusercontent.com/u-u-z/u-u-z/main/img/Remi_IO.JPG\" width=\"100\"/\u003e\n","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-GRADIENT-MAP":{"title":"🌈 GRADIENT MAP","content":"## ❓ WHAT IS\n-   **Adjustment Layer which binds a gradient to the values beneath it**.\n\u003e [Using Gradient Maps to Enhance Your Colors by vampbyte - CLIP STUDIO TIPS](https://tips.clip-studio.com/en-us/articles/2453)\n-   **Maps the tonal range of an image to the colors of a gradient fill.**\n\u003e https://www.bcit.cc/cms/lib04/NJ03000372/Centricity/Domain/299/p6_howto_use_gradient_maps%2018.pdf\n\n\n## ⚙️ PRINCIPLE\n-   GRADIENT MAP PART codes from here: http://jsfiddle.net/kgd28nap/\n## 🔧 IMPLEMENTATION\n\n1.  The **color selector** web component supports selecting a more linear color.    \n2.  Mapping the **color** **RGB** **average** to \"color selector\" results.\n3.  Base64 encoding of images.\n4.  Iteration processing to get the image \"grayscale\".\n5.  Obtain target RGB values by \"grayscale\" mapping 👆.\n\n## 💻 CODE FOR RESEARCH\nhttps://codesandbox.io/s/newdawn-gradient-map-research-em5pyi  \nhttps://em5pyi.csb.app  \n🏠：repo http://192.168.31.233:8000/newdawn/gradient-map-research ()\n\n## 📦 PACKAGES \u0026 DEPENDENCY\n-   **📦 react-linear-gradient-picker**","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-How-Linux-Works":{"title":"📖 HOW LINUX WORKS","content":"\u003e✒ By Satoru Takeuchi ([Github](https://github.com/satoru-takeuchi), [Twitter](https://twitter.com/satoru_takeuchi), [Intro](https://cybozu.co.jp/recruit/staff/sat.html))\n\n## CHAPTER 1: Overview of computer systems\n\nWhen computer running, the hardware device will repeat the following process:\n1. Request / Input by devices or networking.\n2. Read the program from RAM, execute on CPU, save results in RAM (part for save result).\n3. Save results to RAM or HDD/SSD storage, or send throw network devices, or output to device.\n4. repeat 1 ⬆️\n\nThese meaningful steps for user, we call that **the program**. There r Applications, middlewares, and OS program for users.\n\nWhen program is running, we call that **the process**: the unit of program running on OS, one program not only have one processes.\n\nWhen program need call devices, we need driver. Avoid each program making a separate implementation for each device. the same devices types, they have the same interface design on OS driver.\n\n**KERNEL MODE** and **USER MODE**: for isolation, the processes cannot access the device directly, these mode exist implementation in the CPU. A program that runs in kernel mode and is not called by normal user processes is called a **kernel**.\n\n**SYSTEM CALL** : the process call the devices driver (or kernel features).\n\nKernel's main features:\n- Processes management (scheduler);\n- Memeory management;\n- File system features;\n- System call API;\n- Devices driver;\n\n## CHAPTER 2: USER MODE FEATURES\n","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-LLVM-IR-TO-WASM-NOTES":{"title":"🔧 LLVM IR TO WASM NOTES","content":"## Description\nJust a note for C++ -\u003e LLVM IR -\u003e wasm\n## Environments\n❄️ nix-shell :\n```shell\n$ nix-shell -p llvm clang llvmPackages.llvm  llvmPackages.lld llvmPackages.libcxx llvmPackages.libcxxabi wasmer wasmtime\n```\n## Code\n### IR generator\n```C++\n#include \u003ciostream\u003e\n#include \u003cllvm/ADT/APFloat.h\u003e\n#include \u003cllvm/IR/BasicBlock.h\u003e\n#include \u003cllvm/IR/Constants.h\u003e\n#include \u003cllvm/IR/DerivedTypes.h\u003e\n#include \u003cllvm/IR/Function.h\u003e\n#include \u003cllvm/IR/IRBuilder.h\u003e\n#include \u003cllvm/IR/LLVMContext.h\u003e\n#include \u003cllvm/IR/Module.h\u003e\n#include \u003cllvm/IR/Type.h\u003e\n#include \u003cllvm/IR/Verifier.h\u003e\n\nusing namespace llvm;\n\nint main() {\n    LLVMContext context;\n    IRBuilder\u003c\u003e builder(context);\n    std::unique_ptr\u003cModule\u003e module = std::make_unique\u003cModule\u003e(\"helloworld\", context);\n\n    // Declare \"puts\" function\n    std::vector\u003cType *\u003e puts_args;\n    puts_args.push_back(Type::getInt8PtrTy(context));\n    FunctionType *puts_func_type = FunctionType::get(Type::getInt32Ty(context), puts_args, false);\n    Function *puts_func = Function::Create(puts_func_type, Function::ExternalLinkage, \"puts\", module.get());\n\n    // Create main function\n    FunctionType *main_func_type = FunctionType::get(Type::getInt32Ty(context), false);\n    Function *main_func = Function::Create(main_func_type, Function::ExternalLinkage, \"main\", module.get());\n\n    // Create basic block for main function\n    BasicBlock *entry_block = BasicBlock::Create(context, \"entry\", main_func);\n    builder.SetInsertPoint(entry_block);\n\n    // Create \"Hello, World!\" constant string\n    Constant *hello_world = builder.CreateGlobalStringPtr(\"Hello, World!\\n\");\n\n    // Call \"puts\" function with \"Hello, World!\" as argument\n    builder.CreateCall(puts_func, hello_world);\n\n    // Return 0\n    builder.CreateRet(ConstantInt::get(Type::getInt32Ty(context), 0));\n\n    // Verify main function\n    verifyFunction(*main_func);\n\n    // Print generated IR\n    module-\u003eprint(outs(), nullptr);\n\n    return 0;\n}\n```\n\n###  Build \u0026 Generate IR\n```shell\n$ clang++ -std=c++11 `llvm-config --cxxflags --ldflags --libs core` -o ll.out ll.cpp\n$ ./ll.out\n\n; ModuleID = 'helloworld'\nsource_filename = \"helloworld\"\n\n@0 = private unnamed_addr constant [15 x i8] c\"Hello, World!\\0A\\00\", align 1\n\ndeclare i32 @puts(i8*)\n\ndefine i32 @main() {\nentry:\n  %0 = call i32 @puts(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0))\n  ret i32 0\n}\n\n$ ./ll.out \u003e\u003e ll.ll\n$ llc -march=wasm32 -filetype=obj hello.ll -o hello.o\n$ wasm-ld --no-entry --export-dynamic --allow-undefined --import-memory hello.o -o hello.wasm\n```\n\n### Run hello.wasm by nodejs runtim\n\n```js\nconst fs = require('fs');\nconst wasmCode = fs.readFileSync('hello.wasm');\n\nconst wasmImports = {\n  env: {\n    memory: new WebAssembly.Memory({ initial: 256 }),\n    memoryBase: 0,\n    table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' }),\n    tableBase: 0,\n    puts: (ptr) =\u003e {\n      const memory = new Uint8Array(wasmImports.env.memory.buffer);\n      let str = '';\n      while (memory[ptr] !== 0) {\n        str += String.fromCharCode(memory[ptr]);\n        ptr++;\n      }\n      console.log(str);\n    },\n  },\n};\n\nWebAssembly.instantiate(wasmCode, wasmImports)\n  .then((wasmModule) =\u003e {\n    const mainFunc = wasmModule.instance.exports.main;\n    mainFunc();\n  })\n  .catch((error) =\u003e {\n    console.error('Error:', error);\n  });\n```\n","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null},"/-MY-TOOL-COLLECTIONS":{"title":"🔧 MY TOOL COLLECTIONS","content":"\n\u003e updating ...\n\n## Terminal \u0026 Shell\n- 🐈 Kitty\n- 💻 OhMyZsh\n## Package manager\n- ❄️ Nix pkgs\n- 🍺 homebrew\n## Browser\n- Arc\n## Container\n- 🐳 Docker","lastmodified":"2023-04-25T12:16:33.04422106Z","tags":null}}